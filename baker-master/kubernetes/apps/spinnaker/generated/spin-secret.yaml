---
# clouddriver: clouddriver.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-clouddriver
    name: spin-clouddriver-files-708233088
    namespace: spinnaker-pipelines
  stringData:
    clouddriver.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      appengine:
        enabled: false
        accounts: []
      aws:
        enabled: false
        accounts: []
        bakeryDefaults:
          baseImages: []
        defaultKeyPairTemplate: '{{name}}-keypair'
        defaultRegions:
        - name: us-west-2
        defaults:
          iamRole: BaseIAMRole
      ecs:
        enabled: false
        accounts: []
      azure:
        enabled: false
        accounts: []
        bakeryDefaults:
          templateFile: azure-linux.json
          baseImages: []
      dcos:
        enabled: false
        accounts: []
        clusters: []
      dockerRegistry:
        enabled: true
        accounts:
        - name: dockerhub
          requiredGroupMembership: []
          providerVersion: V1
          permissions: {}
          address: https://index.docker.io
          email: fake.email@spinnaker.io
          cacheIntervalSeconds: 30
          clientTimeoutMillis: 60000
          cacheThreads: 1
          paginateSize: 100
          sortTagsByDate: false
          trackDigests: false
          insecureRegistry: false
          repositories:
          - library/alpine
          - library/ubuntu
          - library/centos
          - library/nginx
        primaryAccount: dockerhub
      google:
        enabled: false
        accounts: []
        bakeryDefaults:
          templateFile: gce.json
          baseImages: []
          zone: us-central1-f
          network: default
          useInternalIp: false
      kubernetes:
        enabled: true
        accounts:
        - name: default
          requiredGroupMembership: []
          providerVersion: V2
          permissions: {}
          dockerRegistries:
          - accountName: dockerhub
            namespaces: []
          context: default
          configureImagePullSecrets: true
          serviceAccount: true
          cacheThreads: 1
          namespaces: []
          omitNamespaces:
          - kube-system
          - kube-public
          kinds: []
          omitKinds: []
          customResources: []
          cachingPolicies: []
          oauthScopes: []
          oAuthScopes: []
          onlySpinnakerManaged: false
        primaryAccount: default
      openstack:
        enabled: false
        accounts: []
        bakeryDefaults:
          baseImages: []
      oracle:
        enabled: false
        accounts: []
        bakeryDefaults:
          templateFile: oci.json
          baseImages: []
      cloudfoundry:
        enabled: false
        accounts: []

      artifacts:
        bitbucket:
          enabled: false
          accounts: []
        gcs:
          enabled: false
          accounts: []
        oracle:
          enabled: false
          accounts: []
        github:
          enabled: false
          accounts: []
        gitlab:
          enabled: false
          accounts: []
        http:
          enabled: false
          accounts: []
        helm:
          enabled: false
          accounts: []
        s3:
          enabled: false
          accounts: []
        maven:
          enabled: false
          accounts: []
        templates: []

      # halconfig

      admin.tasks.shutdownWaitSeconds: 600 # 10 minutes

      server:
        port: ${services.clouddriver.port:7002}
        address: ${services.clouddriver.host:localhost}

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}

      caching:
        redis:
          hashingEnabled: true
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# deck: settings.js
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-deck
    name: spin-deck-files-1351838172
    namespace: spinnaker-pipelines
  stringData:
    settings.js: |
      // WARNING
      // This file was autogenerated, and _will_ be overwritten by Halyard.
      // Any edits you make here _will_ be lost.

      'use strict';

      var gateHost = '/gate';
      var artifactsEnabled = 'true' === 'true';
      var atlasWebComponentsUrl = '';
      var authEnabled = 'false' === 'true';
      var authEndpoint = gateHost + '/auth/user';
      var bakeryDetailUrl = gateHost + '/bakery/logs/{{context.region}}/{{context.status.resourceId}}';
      var canaryFeatureDisabled = 'false' !== 'true';
      var canaryStagesEnabled = '{%canary.stages%}' === 'true';
      var changelogGistId = '';
      var changelogGistName = '';
      var chaosEnabled = 'false' === 'true';
      var defaultCanaryJudge = '{%canary.defaultJudge%}';
      var defaultMetricsStore = '{%canary.defaultMetricsStore%}';
      var defaultMetricsAccountName = '{%canary.defaultMetricsAccount%}';
      var defaultStorageAccountName = '{%canary.defaultStorageAccount%}';
      var displayTimestampsInUserLocalTime = '{%features.displayTimestampsInUserLocalTime%}' === 'true';
      var entityTagsEnabled = false;
      var fiatEnabled = 'false' === 'true';
      var iapRefresherEnabled = '{%features.iapRefresherEnabled}' === 'true';
      var infrastructureStagesEnabled = '{%features.infrastructureStages%}' === 'true';
      var jobsEnabled = 'true' === 'true';
      var maxPipelineAgeDays = '{%maxPipelineAgeDays%}';
      var mineCanaryEnabled = 'false' === 'true';
      var notificationsEnabled = 'false' === 'true';
      var onDemandClusterThreshold = '{%onDemandClusterThreshold%}';
      var pipelineTemplatesEnabled = 'false' === 'true';
      var reduxLoggerEnabled = '{%canary.reduxLogger%}' === 'true';
      var showAllConfigsEnabled = '{%canary.showAllCanaryConfigs%}' === 'true';
      var slack = {
        botName: '',
        enabled: 'false' === 'true',
      };
      var sms = {
        enabled: 'false' === 'true',
      };
      var templatesEnabled = '{%canary.templatesEnabled%}' === 'true';
      var travisEnabled = 'false' === 'true';
      var timezone = 'America/Los_Angeles';
      var version = '1.12.5';
      var werckerEnabled = 'false' === 'true';

      // Cloud Providers
      var appengine = {
        defaults: {
          account: '',
          editLoadBalancerStageEnabled: 'false' === 'true',
        },
      };
      var aws = {
        defaults: {
          account: '',
          iamRole: 'BaseIAMRole',
          region: '{%aws.default.region%}',
        },
        defaultSecurityGroups: [],
        loadBalancers: {
          // if true, VPC load balancers will be created as internal load balancers if the selected subnet has a purpose
          // tag that starts with "internal"
          inferInternalFlagFromSubnet: false,
        },
        useAmiBlockDeviceMappings: false,
      };
      var azure = {
        defaults: {
          account: '',
          region: 'westus',
        },
      };
      var cloudfoundry = {
        defaults: {
          account: '',
        },
      };
      var dcos = {
        defaults: {
          account: '',
        },
      };
      var ecs = {
        defaults: {
          account: '',
        },
      };
      var gce = {
        defaults: {
          account: '',
          region: 'us-central1',
          zone: 'us-central1-f',
        },
        associatePublicIpAddress: true,
      };
      var kubernetes = {
        defaults: {
          account: 'default',
          instanceLinkTemplate: '{{host}}/api/v1/proxy/namespaces/{{namespace}}/pods/{{name}}',
          internalDNSNameTemplate: '{{name}}.{{namespace}}.svc.cluster.local',
          namespace: 'default',
          proxy: 'localhost:8001',
        },
      };
      var openstack = {
        defaults: {
          account: '',
          region: '{%openstack.default.region%}',
        },
      };
      var oracle = {
        defaults: {
          account: '{%oracle.default.account%}',
          region: '{%oracle.default.region%}',
        },
      };

      window.spinnakerSettings = {
        authEnabled: authEnabled,
        authEndpoint: authEndpoint,
        authTtl: 600000,
        bakeryDetailUrl: bakeryDetailUrl,
        canary: {
          atlasWebComponentsUrl: atlasWebComponentsUrl,
          defaultJudge: defaultCanaryJudge,
          featureDisabled: canaryFeatureDisabled,
          reduxLogger: reduxLoggerEnabled,
          metricsAccountName: defaultMetricsAccountName,
          metricStore: defaultMetricsStore,
          showAllConfigs: showAllConfigsEnabled,
          stagesEnabled: canaryStagesEnabled,
          storageAccountName: defaultStorageAccountName,
          templatesEnabled: templatesEnabled,
        },
        changelog: {
          fileName: changelogGistName,
          gistId: changelogGistId,
        },
        checkForUpdates: false,
        defaultCategory: 'serverGroup',
        defaultInstancePort: 80,
        defaultProviders: [
          'appengine',
          'aws',
          'azure',
          'cloudfoundry',
          'dcos',
          'ecs',
          'gce',
          'kubernetes',
          'openstack',
          'oracle',
          'titus',
        ],
        defaultTimeZone: timezone, // see http://momentjs.com/timezone/docs/#/data-utilities/
        feature: {
          artifacts: artifactsEnabled,
          canary: mineCanaryEnabled,
          chaosMonkey: chaosEnabled,
          displayTimestampsInUserLocalTime: displayTimestampsInUserLocalTime,
          entityTags: entityTagsEnabled,
          fiatEnabled: fiatEnabled,
          iapRefresherEnabled: iapRefresherEnabled,
          infrastructureStages: infrastructureStagesEnabled,
          jobs: jobsEnabled,
          notifications: notificationsEnabled,
          pagerDuty: false,
          pipelines: true,
          pipelineTemplates: pipelineTemplatesEnabled,
          roscoMode: true,
          snapshots: false,
          travis: travisEnabled,
          triggerViaEcho: true,
          versionedProviders: true,
          wercker: werckerEnabled,
        },
        gateUrl: gateHost,
        gitSources: ['bitbucket', 'gitlab', 'github', 'stash'],
        maxPipelineAgeDays: maxPipelineAgeDays,
        notifications: {
          bearychat: {
            enabled: true,
          },
          email: {
            enabled: true,
          },
          githubStatus: {
            enabled: true,
          },
          googlechat: {
            enabled: true,
          },
          hipchat: {
            botName: 'Skynet T-800',
            enabled: true,
          },
          pubsub: {
            enabled: true,
          },
          slack: slack,
          sms: sms,
        },
        onDemandClusterThreshold: onDemandClusterThreshold,
        pagerDuty: {
          required: false,
        },
        pollSchedule: 30000,
        providers: {
          appengine: appengine,
          aws: aws,
          azure: azure,
          cloudfoundry: cloudfoundry,
          dcos: dcos,
          ecs: ecs,
          gce: gce,
          kubernetes: kubernetes,
          openstack: openstack,
          oracle: oracle,
          titus: {
            defaults: {
              account: 'titustestvpc',
              iamProfile: '{{application}}InstanceProfile',
              region: 'us-east-1',
            },
          },
        },
        pubsubProviders: ['google'], // TODO(joonlim): Add amazon once it is confirmed that amazon pub/sub works.
        triggerTypes: ['cron', 'docker', 'git', 'jenkins', 'pipeline', 'pubsub', 'travis', 'webhook', 'wercker'],
        version: version,
      };
  type: Opaque
---
# echo: echo.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-echo
    name: spin-echo-files-704153741
    namespace: spinnaker-pipelines
  stringData:
    echo.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
      spinnaker.baseUrl: http://localhost:9000
      slack:
        enabled: false
      twilio:
        enabled: false
        baseUrl: https://api.twilio.com/

      pubsub:
        enabled: false
        google:
          enabled: false
          pubsubType: GOOGLE
          subscriptions: []
          publishers: []

      artifacts:
        bitbucket:
          enabled: false
          accounts: []
        gcs:
          enabled: false
          accounts: []
        oracle:
          enabled: false
          accounts: []
        github:
          enabled: false
          accounts: []
        gitlab:
          enabled: false
          accounts: []
        http:
          enabled: false
          accounts: []
        helm:
          enabled: false
          accounts: []
        s3:
          enabled: false
          accounts: []
        maven:
          enabled: false
          accounts: []
        templates: []

      # halconfig

      server:
        port: ${services.echo.port:8089}
        address: ${services.echo.host:localhost}

      spinnaker:
        baseUrl: ${services.deck.baseUrl}
        inMemory:
          enabled: true

      front50:
        enabled: ${services.front50.enabled:false}
        baseUrl: ${services.front50.baseUrl:http://localhost:8080}

      igor:
        enabled: ${services.igor.enabled:false}
        baseUrl: ${services.igor.baseUrl:http://localhost:8088}

      orca:
        enabled: ${services.orca.enabled:false}
        baseUrl: ${services.orca.baseUrl:http://localhost:8083}

      endpoints.health.sensitive: false

      scheduler:
        enabled: ${services.echo.cron.enabled:true}
        threadPoolSize: 20
        triggeringEnabled: true
        pipelineConfigsPoller:
          enabled: true
          pollingIntervalMs: 30000
        cron:
          timezone: ${global.spinnaker.timezone:America/Los_Angeles}

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}
        enabled: ${services.redis.enabled:false}
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# front50: front50.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-front50
    name: spin-front50-files-1233628393
    namespace: spinnaker-pipelines
  stringData:
    front50.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      spinnaker:
        s3:
          bucket: spinnaker
          rootFolder: front50
          endpoint: http://spin-minio:9000
          accessKeyId: spinnakeradmin
          secretAccessKey: spinnakeradmin
          enabled: true
        oracle:
          enabled: false
        gcs:
          rootFolder: front50
          enabled: false
        azs:
          enabled: false
        redis:
          host: spin-redis-master
          port: 6379
          enabled: false

      server:
        port: ${services.front50.port:8080}
        address: ${services.front50.host:localhost}

      cassandra:
        enabled: false

      hystrix:
        command:
          default.execution.isolation.thread.timeoutInMilliseconds: 15000
        threadpool:
          DefaultNotificationDAO:
            coreSize: 25
            maxQueueSize: 100
          DefaultPipelineDAO:
            coreSize: 25
            maxQueueSize: 100
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# front50: credentials
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-front50
    name: spin-front50-files-551245443
    namespace: spinnaker-pipelines
  stringData:
    credentials: |-
      [default]
      aws_access_key_id = spinnakeradmin
      aws_secret_access_key = spinnakeradmin
  type: Opaque
---
# gate: gate.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-gate
    name: spin-gate-files-16860055
    namespace: spinnaker-pipelines
  stringData:
    gate.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      server:
        ssl:
          enabled: false
        port: '8084'
        address: 0.0.0.0
      security:
        basic:
          enabled: true
        user: {}
      cors: {}
      google: {}

      # halconfig

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# igor: igor.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-igor
    name: spin-igor-files-577942768
    namespace: spinnaker-pipelines
  stringData:
    igor.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      dockerRegistry.enabled: true
      jenkins:
        enabled: false
        masters: []
      travis:
        enabled: false
        masters: []
      wercker:
        enabled: false
        masters: []

      server:
        port: ${services.igor.port:8088}
        address: ${services.igor.host:localhost}

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# orca: orca.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-orca
    name: spin-orca-files-993901813
    namespace: spinnaker-pipelines
  stringData:
    orca.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      # halconfig

      server:
        port: ${services.orca.port:8083}
        address: ${services.orca.host:localhost}

      oort:
        baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}

      front50:
        enabled: true
        baseUrl: ${services.front50.baseUrl:http://localhost:8080}

      mort:
        baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}

      kato:
        baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}

      bakery:
        enabled: true
        baseUrl: ${services.rosco.baseUrl:http://localhost:8087}
        extractBuildDetails: ${services.rosco.extractBuildDetails:true}
        allowMissingPackageInstallation: ${services.rosco.allowMissingPackageInstallation:false}

      echo:
        enabled: true
        baseUrl: ${services.echo.baseUrl:http://localhost:8089}

      igor:
        enabled: true
        baseUrl: ${services.igor.baseUrl:http://localhost:8088}

      kayenta:
        enabled: ${services.kayenta.enabled:false}
        baseUrl: ${services.kayenta.baseUrl:http://localhost:8090}

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}

      tasks:
        executionWindow:
          timezone: ${global.spinnaker.timezone:America/Los_Angeles}

      webhook:
        trust:
          enabled: false

      pipelineTemplates.enabled: false
      pipelineTemplate.enabled: false
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# rosco:
# + aws-chroot.json | aws-ebs.json | aws-multi-chroot.json | aws-multi-ebs.json | aws-windows-2012-r2.json
# + azure-linux.json | azure-windows-2012-r2.json
# + gce.json
# + oci.json
# + openstack.json
# + docker.json
# + install_packages.sh
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-rosco
    name: spin-rosco-files-1649034632
    namespace: spinnaker-pipelines
  stringData:
    aws-chroot.json: |
      {
        "variables": {
          "aws_access_key": "",
          "aws_secret_key": "",
          "aws_subnet_id": "{{env `AWS_SUBNET_ID`}}",
          "aws_vpc_id": "{{env `AWS_VPC_ID`}}",
          "aws_region": null,
          "aws_ssh_username": null,
          "aws_instance_type": null,
          "aws_source_ami": null,
          "aws_target_ami": null,
          "aws_associate_public_ip_address": "true",
          "aws_ena_support": "false",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null
        },
        "builders": [{
          "type": "amazon-chroot",
          "ami_virtualization_type": "hvm",
          "access_key": "{{user `aws_access_key`}}",
          "secret_key": "{{user `aws_secret_key`}}",
          "source_ami": "{{user `aws_source_ami`}}",
          "ami_name": "{{user `aws_target_ami`}}",
          "tags": {
            "appversion": "{{user `appversion`}}",
            "build_host": "{{user `build_host`}}",
            "build_info_url": "{{user `build_info_url`}}"
          }
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository='{{user `repository`}}'",
            "package_type={{user `package_type`}}",
            "packages='{{user `packages`}}'",
            "upgrade={{user `upgrade`}}",
            "disable_services=true"
          ]
        }]
      }
    aws-ebs.json: |
      {
        "variables": {
          "aws_access_key": "",
          "aws_secret_key": "",
          "aws_subnet_id": "{{env `AWS_SUBNET_ID`}}",
          "aws_vpc_id": "{{env `AWS_VPC_ID`}}",
          "aws_region": null,
          "aws_ssh_username": null,
          "aws_instance_type": null,
          "aws_source_ami": null,
          "aws_target_ami": null,
          "aws_associate_public_ip_address": "true",
          "aws_ena_support": "false",
          "aws_spot_price": "0",
          "aws_spot_price_auto_product": "",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null
        },
        "builders": [{
          "type": "amazon-ebs",
          "access_key": "{{user `aws_access_key`}}",
          "secret_key": "{{user `aws_secret_key`}}",
          "subnet_id": "{{user `aws_subnet_id`}}",
          "vpc_id": "{{user `aws_vpc_id`}}",
          "region": "{{user `aws_region`}}",
          "ssh_username": "{{user `aws_ssh_username`}}",
          "ssh_pty": true,
          "instance_type": "{{user `aws_instance_type`}}",
          "source_ami": "{{user `aws_source_ami`}}",
          "ami_name": "{{user `aws_target_ami`}}",
          "associate_public_ip_address": "{{user `aws_associate_public_ip_address`}}",
          "ena_support": "{{user `aws_ena_support`}}",
          "spot_price": "{{user `aws_spot_price`}}",
          "spot_price_auto_product": "{{user `aws_spot_price_auto_product`}}",
          "tags": {
            "appversion": "{{user `appversion`}}",
            "build_host": "{{user `build_host`}}",
            "build_info_url": "{{user `build_info_url`}}"
          },
          "run_tags": {"Packages": "{{user `packages`}}"}
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository={{user `repository`}}",
            "package_type={{user `package_type`}}",
            "packages={{user `packages`}}",
            "upgrade={{user `upgrade`}}"
          ],
          "pause_before": "30s"
        }]
      }
    aws-multi-chroot.json: |
      {
        "variables": {
          "aws_access_key": "",
          "aws_secret_key": "",
          "aws_subnet_id": "{{env `AWS_SUBNET_ID`}}",
          "aws_vpc_id": "{{env `AWS_VPC_ID`}}",
          "aws_region": null,
          "aws_ssh_username": null,
          "aws_instance_type": null,
          "aws_source_ami": null,
          "aws_target_ami": null,
          "aws_associate_public_ip_address": "true",
          "aws_ena_support": "false",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null,
          "share_with_1": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_2": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_3": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_4": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_5": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_6": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_7": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_8": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_9": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_10": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "copy_to_1": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_2": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_3": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_4": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_5": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}"
        },
        "builders": [{
          "type": "amazon-chroot",
          "ami_virtualization_type": "hvm",
          "access_key": "{{user `aws_access_key`}}",
          "secret_key": "{{user `aws_secret_key`}}",
          "source_ami": "{{user `aws_source_ami`}}",
          "ami_name": "{{user `aws_target_ami`}}",
          "ami_users": [
            "{{user `share_with_1`}}",
            "{{user `share_with_2`}}",
            "{{user `share_with_3`}}",
            "{{user `share_with_4`}}",
            "{{user `share_with_5`}}",
            "{{user `share_with_6`}}",
            "{{user `share_with_7`}}",
            "{{user `share_with_8`}}",
            "{{user `share_with_9`}}",
            "{{user `share_with_10`}}"
          ],
          "ami_regions": [
            "{{user `copy_to_1`}}",
            "{{user `copy_to_2`}}",
            "{{user `copy_to_3`}}",
            "{{user `copy_to_4`}}",
            "{{user `copy_to_5`}}"
          ],
          "tags": {
            "appversion": "{{user `appversion`}}",
            "build_host": "{{user `build_host`}}",
            "build_info_url": "{{user `build_info_url`}}"
          }
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository='{{user `repository`}}'",
            "package_type={{user `package_type`}}",
            "packages='{{user `packages`}}'",
            "upgrade={{user `upgrade`}}",
            "disable_services=true"
          ]
        }]
      }
    aws-multi-ebs.json: |
      {
        "variables": {
          "aws_access_key": "",
          "aws_secret_key": "",
          "aws_subnet_id": "{{env `AWS_SUBNET_ID`}}",
          "aws_vpc_id": "{{env `AWS_VPC_ID`}}",
          "aws_region": null,
          "aws_ssh_username": null,
          "aws_instance_type": null,
          "aws_source_ami": null,
          "aws_target_ami": null,
          "aws_associate_public_ip_address": "true",
          "aws_ena_support": "false",
          "aws_spot_price": "0",
          "aws_spot_price_auto_product": "",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null,
          "share_with_1": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_2": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_3": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_4": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_5": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_6": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_7": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_8": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_9": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "share_with_10": "{{env `SPINNAKER_AWS_DEFAULT_ACCOUNT`}}",
          "copy_to_1": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_2": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_3": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_4": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}",
          "copy_to_5": "{{env `SPINNAKER_AWS_DEFAULT_REGION`}}"
        },
        "builders": [{
          "type": "amazon-ebs",
          "access_key": "{{user `aws_access_key`}}",
          "secret_key": "{{user `aws_secret_key`}}",
          "subnet_id": "{{user `aws_subnet_id`}}",
          "vpc_id": "{{user `aws_vpc_id`}}",
          "region": "{{user `aws_region`}}",
          "ssh_username": "{{user `aws_ssh_username`}}",
          "ssh_pty": true,
          "instance_type": "{{user `aws_instance_type`}}",
          "source_ami": "{{user `aws_source_ami`}}",
          "ami_name": "{{user `aws_target_ami`}}",
          "ami_users": [
            "{{user `share_with_1`}}",
            "{{user `share_with_2`}}",
            "{{user `share_with_3`}}",
            "{{user `share_with_4`}}",
            "{{user `share_with_5`}}",
            "{{user `share_with_6`}}",
            "{{user `share_with_7`}}",
            "{{user `share_with_8`}}",
            "{{user `share_with_9`}}",
            "{{user `share_with_10`}}"
          ],
          "ami_regions": [
            "{{user `copy_to_1`}}",
            "{{user `copy_to_2`}}",
            "{{user `copy_to_3`}}",
            "{{user `copy_to_4`}}",
            "{{user `copy_to_5`}}"
          ],
          "associate_public_ip_address": "{{user `aws_associate_public_ip_address`}}",
          "ena_support": "{{user `aws_ena_support`}}",
          "spot_price": "{{user `aws_spot_price`}}",
          "spot_price_auto_product": "{{user `aws_spot_price_auto_product`}}",
          "tags": {
            "appversion": "{{user `appversion`}}",
            "build_host": "{{user `build_host`}}",
            "build_info_url": "{{user `build_info_url`}}"
          },
          "run_tags": {"Packages": "{{user `packages`}}"}
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository={{user `repository`}}",
            "package_type={{user `package_type`}}",
            "packages={{user `packages`}}",
            "upgrade={{user `upgrade`}}"
          ],
          "pause_before": "30s"
        }]
      }
    aws-windows-2012-r2.json: |
      {
        "variables": {
          "aws_access_key": "",
          "aws_secret_key": "",
          "aws_subnet_id": "{{env `AWS_SUBNET_ID`}}",
          "aws_vpc_id": "{{env `AWS_VPC_ID`}}",
          "aws_region": null,
          "aws_winrm_username": null,
          "aws_instance_type": null,
          "aws_source_ami": null,
          "aws_target_ami": null,
          "aws_security_group": "",
          "aws_associate_public_ip_address": "false",
          "aws_ena_support": "false",
          "aws_spot_price": "0",
          "aws_spot_price_auto_product": "",
          "aws_userdata_file": "scripts/aws-windows.userdata",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null,
          "chocolateyVersion": ""
        },

        "builders": [
          {
            "type": "amazon-ebs",

            "access_key": "{{user `aws_access_key`}}",
            "secret_key": "{{user `aws_secret_key`}}",

            "communicator": "winrm",
            "winrm_username": "{{user `aws_winrm_username`}}",
            "user_data_file": "{{user `configDir`}}/{{user `aws_userdata_file`}}",

            "vpc_id": "{{user `aws_vpc_id`}}",

            "region": "{{user `aws_region`}}",

            "instance_type": "{{user `aws_instance_type`}}",

            "source_ami": "{{user `aws_source_ami`}}",

            "ami_name": "{{user `aws_target_ami` | clean_ami_name}}",

            "associate_public_ip_address": "{{user `aws_associate_public_ip_address`}}",

            "security_group_id": "{{user `aws_security_group`}}",

            "subnet_id": "{{user `aws_subnet_id`}}",

            "ena_support": "{{user `aws_ena_support`}}",
            "spot_price": "{{user `aws_spot_price`}}",
            "spot_price_auto_product": "{{user `aws_spot_price_auto_product`}}",

            "tags": {
              "appversion": "{{user `appversion`}}",
              "build_host": "{{user `build_host`}}",
              "build_info_url": "{{user `build_info_url`}}"
            },
            "run_tags": {"Packages": "{{user `packages`}}"}
          }
        ],

        "provisioners": [
          {
            "type":"powershell",
            "scripts": [
              "{{user `configDir`}}/scripts/aws-windows-2012-configure-ec2service.ps1",
              "{{user `configDir`}}/scripts/windows-configure-chocolatey.ps1",
              "{{user `configDir`}}/scripts/windows-install-packages.ps1"
            ],
            "environment_vars": [
              "repository={{user `repository`}}",
              "package_type={{user `package_type`}}",
              "packages={{user `packages`}}",
              "upgrade={{user `upgrade`}}",
              "chocolateyVersion={{user `chocolateyVersion`}}"
            ],
            "pause_before": "30s"
          }
        ]
      }
    azure-linux.json: |
      {
        "variables": {
          "azure_client_id": "",
          "azure_client_secret": "",
          "azure_resource_group": "",
          "azure_storage_account": "",
          "azure_subscription_id": "",
          "azure_tenant_id": "",
          "azure_image_publisher": "",
          "azure_image_offer": "",
          "azure_image_sku": "",
          "azure_location": "",
          "azure_image_name": "",

          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null
        },
        "builders": [{
          "type": "azure-arm",

          "client_id": "{{user `azure_client_id`}}",
          "client_secret": "{{user `azure_client_secret`}}",
          "resource_group_name": "{{user `azure_resource_group`}}",
          "storage_account": "{{user `azure_storage_account`}}",
          "subscription_id": "{{user `azure_subscription_id`}}",
          "tenant_id": "{{user `azure_tenant_id`}}",

          "capture_container_name": "images",
          "capture_name_prefix": "{{user `azure_image_name`}}",

          "os_type": "Linux",
          "image_publisher": "{{user `azure_image_publisher`}}",
          "image_offer": "{{user `azure_image_offer`}}",
          "image_sku": "{{user `azure_image_sku`}}",

          "location": "{{user `azure_location`}}",
          "vm_size": "Standard_A2"
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository={{user `repository`}}",
            "package_type={{user `package_type`}}",
            "packages={{user `packages`}}",
            "upgrade={{user `upgrade`}}"
          ],
          "pause_before": "30s"
        },
        {
          "execute_command": "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'",
          "inline": [
            "apt-get update",
            "apt-get upgrade -y",

            "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
          ],
          "inline_shebang": "/bin/sh -x",
          "type": "shell"
        }
        ]
      }
    azure-windows-2012-r2.json: |
      {
        "variables": {
          "azure_client_id": "",
          "azure_client_secret": "",
          "azure_resource_group": "",
          "azure_storage_account": "",
          "azure_subscription_id": "",
          "azure_tenant_id": "",
          "azure_object_id": "",
          "azure_image_publisher": "",
          "azure_image_offer": "",
          "azure_image_sku": "",
          "azure_location": "",
          "azure_image_name": "",

          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null,
          "chocolateyVersion": ""
        },
        "builders": [{
          "type": "azure-arm",

          "communicator": "winrm",
          "winrm_use_ssl": "true",
          "winrm_insecure": "true",
          "winrm_timeout": "5m",
          "winrm_username": "packer",


          "client_id": "{{user `azure_client_id`}}",
          "client_secret": "{{user `azure_client_secret`}}",
          "resource_group_name": "{{user `azure_resource_group`}}",
          "storage_account": "{{user `azure_storage_account`}}",
          "subscription_id": "{{user `azure_subscription_id`}}",
          "tenant_id": "{{user `azure_tenant_id`}}",
          "object_id": "{{user `azure_object_id`}}",

          "capture_container_name": "images",
          "capture_name_prefix": "{{user `azure_image_name`}}",

          "os_type": "Windows",
          "image_publisher": "{{user `azure_image_publisher`}}",
          "image_offer": "{{user `azure_image_offer`}}",
          "image_sku": "{{user `azure_image_sku`}}",

          "location": "{{user `azure_location`}}",
          "vm_size": "Standard_A2"
        }],

        "provisioners": [
          {
            "type":"powershell",
            "scripts": [
              "{{user `configDir`}}/scripts/windows-configure-chocolatey.ps1",
              "{{user `configDir`}}/scripts/windows-install-packages.ps1"
            ],
            "environment_vars": [
              "repository={{user `repository`}}",
              "package_type={{user `package_type`}}",
              "packages={{user `packages`}}",
              "upgrade={{user `upgrade`}}",
              "chocolateyVersion={{user `chocolateyVersion`}}"
            ],
            "pause_before": "30s"
          }
        ]
      }
    docker.json: |
      {
        "variables": {
          "docker_source_image": null,
          "docker_target_image": null,
          "docker_target_image_tag": "latest",
          "docker_target_repository": null,
          "appversion": "",
          "build_info_url": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "configDir": null
        },
        "builders": [{
          "type": "docker",
          "image": "{{user `docker_source_image`}}",
          "commit": true,
          "run_command": ["-d", "-i", "-t",
            "--label", "appversion={{user `appversion`}}",
            "--label", "build_info_url={{user `build_info_url`}}",
            "{{.Image}}", "/bin/bash"]
        }],
        "provisioners": [{
          "type": "shell",
          "script": "{{user `configDir`}}/install_packages.sh",
          "environment_vars": [
            "repository={{user `repository`}}",
            "package_type={{user `package_type`}}",
            "packages={{user `packages`}}"
          ]
        }],
        "post-processors": [[
          {
            "type": "docker-tag",
            "repository": "{{user `docker_target_repository`}}/{{user `docker_target_image`}}",
            "tag": "{{user `docker_target_image_tag`}}"
          },
          "docker-push"
        ]]
      }
    gce.json: |
      {
        "variables": {
          "gce_project_id": null,
          "gce_account_file": "",
          "gce_zone": null,
          "gce_network": null,
          "gce_network_project_id": "",
          "gce_subnetwork": "",
          "gce_source_image": "",
          "gce_source_image_family": "",
          "gce_target_image": null,
          "gce_use_internal_ip": "false",
          "appversion": "",
          "build_host": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null,
          "manifestFile": null,
          "artifactFile": null
        },
        "builders": [{
          "type": "googlecompute",
          "project_id": "{{user `gce_project_id`}}",
          "account_file": "{{user `gce_account_file`}}",
          "zone": "{{user `gce_zone`}}",
          "network": "{{user `gce_network`}}",
          "network_project_id": "{{user `gce_network_project_id`}}",
          "subnetwork": "{{user `gce_subnetwork`}}",
          "state_timeout": "15m",
          "ssh_username": "packerio",
          "ssh_pty": true,
          "source_image": "{{user `gce_source_image`}}",
          "source_image_family": "{{user `gce_source_image_family`}}",
          "image_name": "{{user `gce_target_image`}}",
          "use_internal_ip": "{{user `gce_use_internal_ip`}}",
          "image_description": "appversion: {{user `appversion`}}, build_host: {{user `build_host`}}, build_info_url: {{user `build_info_url`}}"
        }],
        "provisioners": [
          {
            "type": "file",
            "source": "{{user `artifactFile`}}",
            "destination": "/tmp/artifacts.json",
            "pause_before": "30s"
          },
          {
            "type": "shell",
            "script": "{{user `configDir`}}/install_packages.sh",
            "environment_vars": [
              "repository={{user `repository`}}",
              "package_type={{user `package_type`}}",
              "packages={{user `packages`}}",
              "upgrade={{user `upgrade`}}"
            ]
          }
        ],
        "post-processors": [{
            "type": "manifest",
            "output": "{{user `manifestFile`}}"
        }]
      }
    install_packages.sh: |
      #!/bin/bash

      # Make the build fail on errors.
      set -e

      # Strip the first part to avoid credentials leaks.
      echo "repository=$(echo $repository | sed s/^.*@//g)"
      echo "package_type=$package_type"
      echo "packages=$packages"
      echo "upgrade=$upgrade"
      if [[ -e /tmp/artifacts.json ]]; then
        echo "artifacts="
        cat /tmp/artifacts.json
        echo
      fi
      uninstall_jq=false

      # Strip leading/trailing quotes if present.
      repository=`echo $repository | sed 's/^"\(.*\)"$/\1/'`

      # Strip leading/trailing quotes if present.
      # Also convert a comma-separated list to a whitespace-separated one.
      packages=`echo $packages | sed 's/^"\(.*\)"$/\1/' | sed 's/,/ /g'`

      function ensure_jq_deb() {
        if ! dpkg-query -W jq; then
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y jq
          uninstall_jq=true
        fi
      }

      function ensure_jq_rpm() {
        if ! rpm -q jq; then
          sudo yum -y install jq
          uninstall_jq=true
        fi
      }

      function ensure_jq() {
        if [[ "$package_type" == "deb" ]]; then
          ensure_jq_deb
        fi

        if [[ "$package_type" == "rpm" ]]; then
          ensure_jq_rpm
        fi
      }

      function remove_jq_deb() {
        if [[ "$uninstall_jq" = true ]]; then
          sudo DEBIAN_FRONTEND=noninteractive apt-get purge --force-yes -y jq
        fi
      }

      function remove_jq_rpm() {
        if [[ "$uninstall_jq" = true ]]; then
          sudo yum -y autoremove jq
        fi
      }

      function remove_jq() {
        if [[ "$package_type" == "deb" ]]; then
          remove_jq_deb
        fi

        if [[ "$package_type" == "rpm" ]]; then
          remove_jq_rpm
        fi
      }

      function get_artifact_references() {
        touch /tmp/repos
        if [[ "$repository" != "" ]]; then
          IFS=';' read -ra repo <<< "$repository"
          for i in "${repo[@]}"; do
            echo "$i" >> /tmp/repos
          done
        fi

        if [[ -e /tmp/artifacts.json ]]; then
          ensure_jq
          # The last field of each artifact reference is the package to install, and the remaning
          # fields are the repo from which to install it
          jq -r '.[] | .reference' /tmp/artifacts.json | awk 'NF{NF-=1} { print $0 }' >> /tmp/repos
          artifact_packages="$(jq -r '.[] | .reference' /tmp/artifacts.json | awk '{print $NF}')"
          remove_jq
          rm /tmp/artifacts.json
        fi

        readarray -t repo < <(sort /tmp/repos | uniq)
        rm /tmp/repos
      }

      function provision_deb() {
        # https://www.packer.io/docs/builders/amazon-chroot.html look at gotchas at the end.
        if [[ "$disable_services" == "true" ]]; then
          echo "creating /usr/sbin/policy-rc.d to prevent services from being started"
          echo '#!/bin/sh' | sudo tee /usr/sbin/policy-rc.d > /dev/null
          echo 'exit 101' | sudo tee -a /usr/sbin/policy-rc.d > /dev/null
          sudo chmod a+x /usr/sbin/policy-rc.d
        fi

        for i in "${repo[@]}"; do
          echo "deb $i" | sudo tee -a /etc/apt/sources.list.d/spinnaker.list > /dev/null
        done

        sudo apt-get update
        if [[ "$upgrade" == "true" ]]; then
          sudo unattended-upgrade -v
        fi

        # Enforce the package installation order.
        for package in $packages $artifact_packages; do
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y $package;
        done

        # https://www.packer.io/docs/builders/amazon-chroot.html look at gotchas at the end.
        if [[ "$disable_services" == "true" ]]; then
          echo "removing /usr/sbin/policy-rc.d"
          sudo rm -f /usr/sbin/policy-rc.d
        fi

        if [[ -e /etc/apt/sources.list.d/spinnaker.list ]]; then
          # Cleanup repository configuration
          sudo rm /etc/apt/sources.list.d/spinnaker.list
        fi
      }

      function provision_rpm() {
        for i in "${!repo[@]}"; do
          ts=$(date +%s)
          cat > /tmp/spinnaker-$i.repo <<EOF
      [spinnaker-$ts-$i]
      name=spinnaker-$ts-$i
      baseurl=${repo[$i]}
      gpgcheck=0
      enabled=1
      EOF
        done
        if ls /tmp/spinnaker*.repo; then
          sudo mv /tmp/spinnaker*.repo /etc/yum.repos.d/
        fi

        if [[ "$upgrade" == "true" ]]; then
          sudo yum -y update
        fi

        # Enforce the package installation order.
        for package in $packages $artifact_packages; do sudo yum -y install $package; done

        if [[ "$repository" != "" ]]; then
          # Cleanup repository configuration
          sudo rm /etc/yum.repos.d/spinnaker*.repo
        fi
      }

      function main() {
        get_artifact_references
        if [[ "$package_type" == "deb" ]]; then
          provision_deb
        elif [[ "$package_type" == "rpm" ]]; then
          provision_rpm
        fi
      }

      main
    oci.json: |
      {
        "variables": {
          "oracle_availability_domain": null,
          "oracle_region": null,
          "oracle_base_image_id": null,
          "oracle_compartment_id": null,
          "oracle_image_name": null,
          "oracle_instance_shape": null,
          "oracle_ssh_user_name": null,
          "oracle_subnet_id": null,
          "oracle_tenancy_id": null,
          "oracle_user_id": null,
          "oracle_fingerprint": null,
          "oracle_ssh_private_key_file_path": null,
          "oracle_pass_phrase": "",

          "appversion": "",
          "build_host": "",
          "build_info_url": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null
        },
        "builders": [
          {
            "type": "oracle-oci",
            "availability_domain": "{{user `oracle_availability_domain`}}",
            "region": "{{user `oracle_region`}}",
            "base_image_ocid": "{{user `oracle_base_image_id`}}",
            "compartment_ocid": "{{user `oracle_compartment_id`}}",
            "image_name": "{{user `oracle_image_name`}}",
            "shape": "{{user `oracle_instance_shape`}}",
            "ssh_username": "{{user `oracle_ssh_user_name`}}",
            "subnet_ocid": "{{user `oracle_subnet_id`}}",
            "tenancy_ocid": "{{user `oracle_tenancy_id`}}",
            "user_ocid": "{{user `oracle_user_id`}}",
            "fingerprint": "{{user `oracle_fingerprint`}}",
            "key_file": "{{user `oracle_ssh_private_key_file_path`}}",
            "pass_phrase": "{{user `oracle_pass_phrase`}}"
          }
        ],
        "provisioners": [
          {
            "type": "shell",
            "script": "{{user `configDir`}}/install_packages.sh",
            "environment_vars": [
              "repository={{user `repository`}}",
              "package_type={{user `package_type`}}",
              "packages={{user `packages`}}",
              "upgrade={{user `upgrade`}}"
            ],
            "pause_before": "30s"
          }
        ]
      }
    openstack.json: |
      {
        "variables": {
          "openstack_domain_name": null,
          "openstack_instance_type": null,
          "openstack_network_id": null,
          "openstack_floating_ip_pool": null,
          "openstack_image_name": null,
          "openstack_auth_url": null,
          "openstack_insecure": "false",
          "openstack_source_image_id": null,
          "openstack_ssh_username": null,
          "openstack_username": "{{env `OS_USERNAME`}}",
          "openstack_password": "{{env `OS_PASSWORD`}}",
          "openstack_region": null,
          "openstack_security_groups": null,
          "openstack_project_name": null,
          "appversion": "",
          "build_host": "",
          "build_info_url": "",
          "repository": "",
          "package_type": "",
          "packages": "",
          "upgrade": "",
          "configDir": null
        },
        "builders": [
          {
            "type": "openstack",
            "domain_name": "{{user `openstack_domain_name`}}",
            "flavor": "{{user `openstack_instance_type`}}",
            "networks": [ "{{user `openstack_network_id`}}" ],
            "floating_ip_pool": "{{user `openstack_floating_ip_pool`}}",
            "image_name": "{{user `openstack_image_name`}}",
            "identity_endpoint": "{{user `openstack_auth_url`}}",
            "insecure": "{{user `openstack_insecure`}}",
            "metadata": {"appversion": "{{user `appversion`}}", "build_host": "{{user `build_host`}}", "build_info_url": "{{user `build_info_url`}}"},
            "region": "{{user `openstack_region`}}",
            "ssh_username": "{{user `openstack_ssh_username`}}",
            "source_image": "{{user `openstack_source_image_id`}}",
            "username": "{{user `openstack_username`}}",
            "password": "{{user `openstack_password`}}",
            "security_groups": "{{user `openstack_security_groups`}}",
            "tenant_name": "{{user `openstack_project_name`}}"
          }
        ],
        "provisioners": [
          {
            "type": "shell",
            "script": "{{user `configDir`}}/install_packages.sh",
            "environment_vars": [
              "repository={{user `repository`}}",
              "package_type={{user `package_type`}}",
              "packages={{user `packages`}}",
              "upgrade={{user `upgrade`}}"
            ],
            "pause_before": "30s"
          }
        ]
      }
  type: Opaque
---
# rosco: rosco.yml | spinnaker.yml
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-rosco
    name: spin-rosco-files-1678084216
    namespace: spinnaker-pipelines
  stringData:
    rosco.yml: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      spectator:
        applicationName: ${spring.application.name}
        webEndpoint:
          enabled: false

      # halconfig

      server:
        port: ${services.rosco.port:8087}
        address: ${services.rosco.host:localhost}

      redis:
        connection: ${services.redis.baseUrl:redis://localhost:6379}

      rosco:
        configDir: /opt/rosco/config/packer
    spinnaker.yml: |-
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      services:
        clouddriver:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver.spinnaker-pipelines:7002
          enabled: true
        clouddriverCaching:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-caching.spinnaker-pipelines:7002
          enabled: false
        clouddriverRo:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro.spinnaker-pipelines:7002
          enabled: false
        clouddriverRoDeck:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-ro-deck.spinnaker-pipelines:7002
          enabled: false
        clouddriverRw:
          host: 0.0.0.0
          port: 7002
          baseUrl: http://spin-clouddriver-rw.spinnaker-pipelines:7002
          enabled: false
        deck:
          host: 0.0.0.0
          port: 9000
          baseUrl: http://localhost:9000
          enabled: true
        echo:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo.spinnaker-pipelines:8089
          enabled: true
        echoScheduler:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-scheduler.spinnaker-pipelines:8089
          enabled: false
        echoWorker:
          host: 0.0.0.0
          port: 8089
          baseUrl: http://spin-echo-worker.spinnaker-pipelines:8089
          enabled: false
        fiat:
          host: 0.0.0.0
          port: 7003
          baseUrl: http://spin-fiat.spinnaker-pipelines:7003
          enabled: false
        front50:
          host: 0.0.0.0
          port: 8080
          baseUrl: http://spin-front50.spinnaker-pipelines:8080
          enabled: true
        gate:
          host: 0.0.0.0
          port: 8084
          baseUrl: /gate
          enabled: true
        igor:
          host: 0.0.0.0
          port: 8088
          baseUrl: http://spin-igor.spinnaker-pipelines:8088
          enabled: true
        kayenta:
          host: 0.0.0.0
          port: 8090
          baseUrl: http://spin-kayenta.spinnaker-pipelines:8090
          enabled: false
        orca:
          host: 0.0.0.0
          port: 8083
          baseUrl: http://spin-orca.spinnaker-pipelines:8083
          enabled: true
        redis:
          host: 0.0.0.0
          port: 6379
          baseUrl: redis://:password@spin-redis-master:6379
          enabled: true
        rosco:
          host: 0.0.0.0
          port: 8087
          baseUrl: http://spin-rosco.spinnaker-pipelines:8087
          enabled: true
        monitoringDaemon:
          host: 0.0.0.0
          port: 8008
          baseUrl: http://spin-monitoring-daemon.spinnaker-pipelines:8008
          enabled: false

      global.spinnaker.timezone: America/Los_Angeles
  type: Opaque
---
# rosco:
# + aws-windows-2012-configure-ec2service.ps1
# + aws-windows.userdata
# + windows-configure-chocolatey.ps1
# + windows-install-packages.ps1
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-rosco
    name: spin-rosco-files-2090299775
    namespace: spinnaker-pipelines
  stringData:
    aws-windows-2012-configure-ec2service.ps1: |
      # The EC2Config Service configures the EC2 instance at boot time. See the following URL for more details:
      # http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html#UsingConfigXML_WinAMI

      # Note: The EC2Config Service is not included in Windows Server 2016 AMI's. See the folloing URL for more details:
      # http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#win2k16-amis

      # Configure the EC2Config service.
      $ConfigFile="C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\Config.xml"
      $xml = [xml](get-content $ConfigFile)
      $xmlElement = $xml.get_DocumentElement()
      $xmlElementToModify = $xmlElement.Plugins

      foreach ($element in $xmlElementToModify.Plugin)
      {
          if ($element.name -eq "Ec2SetPassword")
          {
              $element.State="Enabled"
          }
          elseif ($element.name -eq "Ec2SetComputerName")
          {
              $element.State="Enabled"
          }
          elseif ($element.name -eq "Ec2HandleUserData")
          {
              $element.State="Enabled"
          }
      }
      $xml.Save($ConfigFile)

      # Configure how EC2Config prepares the instance for AMI creation.
      $BundleConfigFile="C:\\Program Files\\Amazon\\Ec2ConfigService\\Settings\\BundleConfig.xml"
      $xml = [xml](get-content $BundleConfigFile)
      $xmlElement = $xml.get_DocumentElement()

      foreach ($element in $xmlElement.Property)
      {
          if ($element.Name -eq "AutoSysprep")
          {
              $element.Value="Yes"
          }
      }
      $xml.Save($BundleConfigFile)
    aws-windows.userdata: |
      <powershell>

      # Turn off PowerShell execution policy restrictions.
      $Policy = "Bypass"
      $CurrentExecutionPolicy = (Get-ExecutionPolicy)
      If ($CurrentExecutionPolicy -ne $Policy -OR $CurrentExecutionPolicy -ne "Unrestricted") {
        Set-ExecutionPolicy $Policy -Scope Process -Force
      }

      # Configure WinRM.
      winrm quickconfig -q
      winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="2048"}'
      winrm set winrm/config/winrs '@{MaxConcurrentUsers="100"}'
      winrm set winrm/config/winrs '@{MaxProcessesPerShell="0"}'
      winrm set winrm/config/winrs '@{MaxShellsPerUser="0"}'
      winrm set winrm/config '@{MaxTimeoutms="7200000"}'
      winrm set winrm/config/service '@{AllowUnencrypted="true"}'
      winrm set winrm/config/service/auth '@{Basic="true"}'
      winrm set winrm/config/service/auth '@{CredSSP="true"}'
      winrm set winrm/config/client '@{TrustedHosts="*"}'


      # Open port 5985 in the internal Windows firewall to allow WinRM communication.
      netsh advfirewall firewall add rule name="WinRM 5985" protocol=TCP dir=in localport=5985 action=allow

      Stop-Service winrm
      Set-Service winrm -startuptype "automatic"
      Start-Service winrm

      </powershell>
    windows-configure-chocolatey.ps1: |2

      # Install Chocolatey.
      Invoke-WebRequest https://chocolatey.org/install.ps1 -UseBasicParsing | Invoke-Expression

      # These are the reserved sources that are handled directly by Chocolatey.
      $alternateSources = @("ruby", "webpi", "cygwin", "windowsfeatures", "python")

      # Spilt supplied repositories into individual entries.
      [string]$chocolateyRepository = $env:repository
      [string[]]$repositories = @()
      if (![string]::IsNullOrWhiteSpace($chocolateyRepository) -AND $chocolateyRepository -contains ';') {
          [string[]]$repositories = $chocolateyRepository.Split(';', [System.StringSplitOptions]::RemoveEmptyEntries)
      } else {
          $repositories = @($chocolateyRepository)
      }

      # Process each repository, adding each one as a package repository.
      $repositoryPriority = 0
      for ($i=0; $i -lt $repositories.Length; $i++) {

          if (![string]::IsNullOrWhiteSpace($repositories[$i])) {

              # Remove leading and trailing whitespaces from the repository URL.
              $repository = $repositories[$i].Trim()

              if (![string]::IsNullOrWhiteSpace($repository)) {

                  $user = $null
                  $pass = $null

                  # Ignore repository if it's one of the alternate sources.
                  if ($alternateSources -contains $repository) { continue }

                  # Validate the repository URL exists. If status code is not 200 or an exception is
                  # thrown, ignore the repository.
                  $isValid = $false
                  try {

                      $repoUri = [System.Uri]$repository
                      $headers = @{}
                      if(![string]::IsNullOrWhiteSpace($repoUri.UserInfo))
                      {
                          $userpass = $repoUri.UserInfo.Split(":")
                          $user = $userpass[0]
                          $pass = $userpass[1]
                          $repository = $repoUri.AbsoluteUri.Replace($repoUri.UserInfo + "@", "")
                          $base64 = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("${user}:${pass}"))
                          $headers = @{ Authorization = "Basic $base64" }
                      }

                      $statusCode = (Invoke-WebRequest -Uri "$repository" `
                                                      -UseBasicParsing `
                                                      -Method GET `
                                                      -MaximumRedirection 0 `
                                                      -TimeoutSec 60 `
                                                      -Headers $headers).StatusCode
                      $isValid = ($statusCode -ge 200 -and $statusCode -lt 300)

                  } catch {
                      $ErrorMessage = $_.Exception.Message
                      $FailedItem = $_.Exception.ItemName
                      Write-Host "Caught exception validating repository ($$repository{}). FailedItem: $FailedItem; ErrorMessage: $ErrorMessage"
                      continue
                  }

                  # Ignore repository if URL is invalid.
                  if (!$isValid) { continue }

                  # Increment repository priority.
                  $repositoryPriority++

                  # Extract the repository name. Use the hostname and domain, coverting the periods to dashes.
                  $repositoryName = (New-Object System.Uri $repository).Host.Replace(".", "-")

                  # Add repository to Chocolatey.
                  if(![string]::IsNullOrWhiteSpace($user)){
                      &"choco" source add --yes --name=$repositoryName --source=`"$repository`" --priority=$repositoryPriority --user=$user --password=$pass
                  } else {
                      &"choco" source add --yes --name=$repositoryName --source=`"$repository`" --priority=$repositoryPriority
                  }

              }
          }
      }
    windows-install-packages.ps1: "$packages = @()\n\nfunction Convert-PackageNameToInstallablePackage([string]$packageName)
      {\n    # Parse package name into it's constituent parts\n    [string]$packageVersion
      = \"\"\n    [string]$packageRelease = \"\"\n\n    # Keep this verbatim minus leading
      bang\n    if ($packageName.StartsWith(\"!\")) {\n      return $packageName.TrimStart(\"!\"),
      \"\"\n    }\n\n    # Split packageName into an array.\n    [Collections.Generic.List[String]]$parts
      = $packageName.split('.')\n\n    if ($parts.Count -gt 2) {\n        [int]$versionStart
      = 0\n\n        for ([int]$i = 0; $i -lt $parts.Count; $i++) {\n            if
      ($i -gt 0 -and $parts[$i] -match '^\\d+$') {\n                $versionStart =
      $i\n                break\n            }\n        }\n\n        if ($versionStart
      -lt 1) {\n            for ([int]$i = 0; $i -lt $partsCount; $i++) {\n                if
      ($i -gt 0 -and $parts[$i].Contains('-') -and $parts[$i][0] -match '^\\d+$') {\n
      \                   $versionStart = $i\n                    break\n                }\n
      \           }\n        }\n\n        if ($versionStart -gt 0) {\n            $packageName
      = [String]::Join('.', $parts.GetRange(0, $versionStart).ToArray())\n            $packageVersion
      = [String]::Join('.', $parts.GetRange($versionStart, $parts.Count - $versionStart).ToArray())\n\n
      \           if ($packageVersion.Contains('-')) {\n                ($packageVersion,
      $packageRelease) = $packageVersion.Split('-', 2)\n            }\n            elseif
      ($packageVersion.Contains('+')) {\n                ($packageVersion, $packageRelease)
      = $packageVersion.Split('+', 2)\n                $packageRelease = '+' + $packageRelease\n
      \           }\n\n        }\n        else {\n\n            [int]$metaDataIndex
      = $parts.FindIndex( {$args[0] -match '\\+'} )\n\n            if ($metaDataIndex
      -gt -1) {\n                ($packageName, $packageRelease) = $parts[$metaDataIndex].split('+')\n
      \               $packageRelease = \"+\" + $packageRelease\n                $packageName
      = \"${parts.subList(0, metaDataIndex).join('.')}.$name\"\n            }\n            else
      {\n                $packageName = [String]::Join('.', $parts)\n            }\n
      \       }\n    }\n    elseif ($parts.Count -eq 2) {\n        if ($parts[1] -match
      '^\\d+$') {\n            $packageName = $parts[0]\n            $packageVersion
      = $parts[1]\n        }\n        elseif ($parts[1][0] -match '^\\d+$' -and $parts[1].Contains('-'))
      {\n\n            $packageName = $parts[0]\n\n            $versionParts = $parts[1].Split('-',
      2)\n            $packageVersion = $versionParts[0]\n            $packageRelease
      = $versionParts[1]\n\n        }\n        else {\n            $packageName = [String]::Join('.',
      $parts)\n        }\n    }\n\n    return $packageName, $packageVersion\n}\n\nfunction
      Install-AllPackages($packageNames){\n  # Split supplied packages into an array.\n
      \ $packages = $packageNames.replace(',', ' ').split(' ')\n  \n    # Install packages
      and enforce installation order.\n    foreach ($packageName in $packages | Where-Object
      {-not [string]::IsNullOrWhiteSpace($_)}) {\n      $packageName, $packageVersion
      = Convert-PackageNameToInstallablePackage $packageName\n\n      if (![string]::IsNullOrWhiteSpace($packageVersion))
      {\n        &\"choco\" install $packageName --yes --version $packageVersion\n      }\n
      \     else {\n        &\"choco\" install $packageName --yes\n      }\n      \n
      \     if ($LastExitCode -ne 0) {\n        exit $LastExitCode\n      }\n    }\n}\n\nWrite-Host
      $env:packages\n\nif (![string]::IsNullOrWhiteSpace($env:packages)) {\n  Install-AllPackages
      $env:packages\n}\n"
  type: Opaque
---
# dockerhub
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin-spinnaker
      chart: spinnaker-1.8.1
      component: clouddriver
      heritage: Tiller
      release: spin
    name: spin-spinnaker-registry
    namespace: spinnaker-pipelines
  stringData:
    dockerhub: ""
  type: Opaque
---
# orca: shutdown.sh
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: spin
      cluster: spin-orca
    name: spin-orca-files-795629369
    namespace: spinnaker-pipelines
  stringData:
    shutdown.sh: |
      ## WARNING
      ## This file was autogenerated, and _will_ be overwritten by Halyard.
      ## Any edits you make here _will_ be lost.

      wget --header="content-type: application/json"  --post-data='{"enabled": "false"}' http://localhost:8083/admin/instance/enabled

      sleep 30
  type: Opaque
---
